country_customer_type_summary <- sen_mun %>%
group_by(country, Customer_Type) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
mutate(Total_Revenue = sum(Revenue)) %>%
arrange(country, desc(Revenue))
# Step 1: Create a summary data frame with total revenue by country and Customer_Type
country_customer_type_summary <- sen_mun %>%
group_by(country, `Customer Type`) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
mutate(Total_Revenue = sum(Revenue)) %>%
arrange(country, desc(Revenue))
# Step 2: Create the horizontal stacked bar chart
ggplot(country_customer_type_summary, aes(y = reorder(country, Total_Revenue), x = Revenue, fill = Customer_Type)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(
aes(label = scales::comma(Total_Revenue), y = country),
x = Inf,  # Position at the far right of the plot
hjust = 1.1,  # Just outside the plot
color = "black",
data = . %>% group_by(country) %>% summarise(Total_Revenue = first(Total_Revenue))  # Ensure one label per country
) +
labs(title = "Total Revenue by Country and Customer Type",
y = "Country",
x = "Revenue") +
theme_minimal() +
theme(
axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.y = element_blank(),  # Remove the y-axis title
legend.position = "bottom"
) +
scale_x_continuous(labels = scales::comma)  # Format x-axis labels with commas for thousands
# Step 1: Create a summary data frame with total revenue by country and Customer_Type
country_customer_type_summary <- sen_mun %>%
group_by(country, `Customer Type`) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
mutate(Total_Revenue = sum(Revenue)) %>%
arrange(country, desc(Revenue))
# Step 2: Create the horizontal stacked bar chart
ggplot(country_customer_type_summary, aes(y = reorder(country, Total_Revenue), x = Revenue, fill = `Customer Type`)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(
aes(label = scales::comma(Total_Revenue), y = country),
x = Inf,  # Position at the far right of the plot
hjust = 1.1,  # Just outside the plot
color = "black",
data = . %>% group_by(country) %>% summarise(Total_Revenue = first(Total_Revenue))  # Ensure one label per country
) +
labs(title = "Total Revenue by Country and Customer Type",
y = "Country",
x = "Revenue") +
theme_minimal() +
theme(
axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.y = element_blank(),  # Remove the y-axis title
legend.position = "bottom"
) +
scale_x_continuous(labels = scales::comma)  # Format x-axis labels with commas for thousands
# Step 1: Create a summary data frame with total revenue by country and Customer_Type
country_customer_type_summary <- sen_mun %>%
group_by(country, `Customer Name`) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
mutate(Total_Revenue = sum(Revenue)) %>%
arrange(country, desc(Revenue))
sen_mun
# Step 1: Create a summary data frame with total revenue by country and Customer_Type
country_customer_type_summary <- sen_mun %>%
group_by(country, `Customer_Name`) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
mutate(Total_Revenue = sum(Revenue)) %>%
arrange(country, desc(Revenue))
# Step 2: Create the horizontal stacked bar chart
ggplot(country_customer_type_summary, aes(y = reorder(country, Total_Revenue), x = Revenue, fill = `Customer_Name`)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(
aes(label = scales::comma(Total_Revenue), y = country),
x = Inf,  # Position at the far right of the plot
hjust = 1.1,  # Just outside the plot
color = "black",
data = . %>% group_by(country) %>% summarise(Total_Revenue = first(Total_Revenue))  # Ensure one label per country
) +
labs(title = "Total Revenue by Country and Customer Type",
y = "Country",
x = "Revenue") +
theme_minimal() +
theme(
axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.y = element_blank(),  # Remove the y-axis title
legend.position = "bottom"
) +
scale_x_continuous(labels = scales::comma)  # Format x-axis labels with commas for thousands
# Step 1: Create a summary data frame with total revenue by country and Customer_Type
country_customer_type_summary <- sen_mun %>%
group_by(country, `Customer Type`) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
mutate(Total_Revenue = sum(Revenue)) %>%
arrange(country, desc(Revenue))
# Step 2: Create the horizontal stacked bar chart
ggplot(country_customer_type_summary, aes(y = reorder(country, Total_Revenue), x = Revenue, fill = `Customer Type`)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(
aes(label = scales::comma(Total_Revenue), y = country),
x = Inf,  # Position at the far right of the plot
hjust = 1.1,  # Just outside the plot
color = "black",
data = . %>% group_by(country) %>% summarise(Total_Revenue = first(Total_Revenue))  # Ensure one label per country
) +
labs(title = "Total Revenue by Country and Customer Type",
y = "Country",
x = "Revenue") +
theme_minimal() +
theme(
axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.y = element_blank(),  # Remove the y-axis title
legend.position = "bottom"
) +
scale_x_continuous(labels = scales::comma)  # Format x-axis labels with commas for thousands
# First, ensure that your country_customer_type_summary data frame is correct
# Create a summary data frame with total revenue by country and Customer_Type
country_customer_type_summary <- sen_mun %>%
group_by(country, `Customer Type`) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
ungroup() %>%
arrange(desc(Revenue))
# Then, create a separate summary for the labels with the total revenue per country
total_revenue_labels <- country_customer_type_summary %>%
group_by(country) %>%
summarise(Total_Revenue = sum(Revenue), .groups = 'drop')
# Now create the horizontal bar chart with correct mappings
ggplot(country_customer_type_summary, aes(x = Revenue, y = reorder(country, -Total_Revenue), fill = `Customer Type`)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(data = total_revenue_labels, aes(x = Total_Revenue, y = country, label = scales::comma(Total_Revenue)),
hjust = 1.1, color = "black", size = 3.5) +
labs(title = "Total Revenue by Country and Customer Type",
x = "Revenue",
y = "Country") +
theme_minimal() +
theme(
axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.y = element_blank(),
legend.position = "bottom"
) +
scale_x_continuous(labels = scales::comma) +
coord_flip()
# First, ensure that your country_customer_type_summary data frame is correct
# Create a summary data frame with total revenue by country and Customer_Type
country_customer_type_summary <- sen_mun %>%
group_by(country, `Customer Type`) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
ungroup() %>%
arrange(desc(Revenue))
# Then, create a separate summary for the labels with the total revenue per country
total_revenue_labels <- country_customer_type_summary %>%
group_by(country) %>%
summarise(Total_Revenue = sum(Revenue), .groups = 'drop')
# Now create the horizontal bar chart with correct mappings
ggplot(country_customer_type_summary, aes(x = Revenue, y = reorder(country, -`Total Revenue`), fill = `Customer Type`)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(data = total_revenue_labels, aes(x = Total_Revenue, y = country, label = scales::comma(Total_Revenue)),
hjust = 1.1, color = "black", size = 3.5) +
labs(title = "Total Revenue by Country and Customer Type",
x = "Revenue",
y = "Country") +
theme_minimal() +
theme(
axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.y = element_blank(),
legend.position = "bottom"
) +
scale_x_continuous(labels = scales::comma) +
coord_flip()
# First, ensure that your country_customer_type_summary data frame is correct
# Create a summary data frame with total revenue by country and Customer_Type
country_customer_type_summary <- sen_mun %>%
group_by(country, `Customer Type`) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
ungroup() %>%
arrange(desc(Revenue))
# Then, create a separate summary for the labels with the total revenue per country
total_revenue_labels <- country_customer_type_summary %>%
group_by(country) %>%
summarise(Total_Revenue = sum(Revenue), .groups = 'drop')
# Now create the horizontal bar chart with correct mappings
ggplot(country_customer_type_summary, aes(x = Revenue, y = reorder(country, -Total_Revenue), fill = `Customer Type`)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(data = total_revenue_labels, aes(x = Total_Revenue, y = country, label = scales::comma(Total_Revenue)),
hjust = 1.1, color = "black", size = 3.5) +
labs(title = "Total Revenue by Country and Customer Type",
x = "Revenue",
y = "Country") +
theme_minimal() +
theme(
axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.y = element_blank(),
legend.position = "bottom"
) +
scale_x_continuous(labels = scales::comma) +
coord_flip()
sen_mun
# First, ensure that your country_customer_type_summary data frame is correct
# Create a summary data frame with total revenue by country and Customer_Type
country_customer_type_summary <- sen_mun %>%
group_by(country, `Customer Type`) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
ungroup() %>%
arrange(desc(Revenue))
# Then, create a separate summary for the labels with the total revenue per country
total_revenue_labels <- country_customer_type_summary %>%
group_by(country) %>%
summarise(Revenue = sum(Revenue), .groups = 'drop')
# Now create the horizontal bar chart with correct mappings
ggplot(country_customer_type_summary, aes(x = Revenue, y = reorder(country, -Revenue), fill = `Customer Type`)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(data = total_revenue_labels, aes(x = Total_Revenue, y = country, label = scales::comma(Total_Revenue)),
hjust = 1.1, color = "black", size = 3.5) +
labs(title = "Total Revenue by Country and Customer Type",
x = "Revenue",
y = "Country") +
theme_minimal() +
theme(
axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.y = element_blank(),
legend.position = "bottom"
) +
scale_x_continuous(labels = scales::comma) +
coord_flip()
# First, ensure that your country_customer_type_summary data frame is correct
# Create a summary data frame with total revenue by country and Customer_Type
country_customer_type_summary <- sen_mun %>%
group_by(country, `Customer Type`) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
ungroup() %>%
arrange(desc(Revenue))
# Then, create a separate summary for the labels with the total revenue per country
total_revenue_labels <- country_customer_type_summary %>%
group_by(country) %>%
summarise(Revenue = sum(Revenue), .groups = 'drop')
# Now create the horizontal bar chart with correct mappings
ggplot(country_customer_type_summary, aes(x = Revenue, y = reorder(country, -Revenue), fill = `Customer Type`)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(data = total_revenue_labels, aes(x = Revenue, y = country, label = scales::comma(Total_Revenue)),
hjust = 1.1, color = "black", size = 3.5) +
labs(title = "Total Revenue by Country and Customer Type",
x = "Revenue",
y = "Country") +
theme_minimal() +
theme(
axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.y = element_blank(),
legend.position = "bottom"
) +
scale_x_continuous(labels = scales::comma) +
coord_flip()
# First, ensure that your country_customer_type_summary data frame is correct
# Create a summary data frame with total revenue by country and Customer_Type
country_customer_type_summary <- sen_mun %>%
group_by(country, `Customer Type`) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
ungroup() %>%
arrange(desc(Revenue))
# Then, create a separate summary for the labels with the total revenue per country
total_revenue_labels <- country_customer_type_summary %>%
group_by(country) %>%
summarise(Revenue = sum(Revenue), .groups = 'drop')
# Now create the horizontal bar chart with correct mappings
ggplot(country_customer_type_summary, aes(x = Revenue, y = reorder(country, -Revenue), fill = `Customer Type`)) +
geom_bar(stat = "identity", position = "fill") +
geom_text(data = total_revenue_labels, aes(x = Revenue, y = country, label = scales::comma(Revenue)),
hjust = 1.1, color = "black", size = 3.5) +
labs(title = "Total Revenue by Country and Customer Type",
x = "Revenue",
y = "Country") +
theme_minimal() +
theme(
axis.text.y = element_text(angle = 0, hjust = 1),
axis.title.y = element_blank(),
legend.position = "bottom"
) +
scale_x_continuous(labels = scales::comma) +
coord_flip()
# Step 1: Summarize the data by Customer_Name and Product_Line
customer_product_revenue <- sen_mun %>%
group_by(Customer_Name, Product_Line) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
arrange(desc(Revenue))
# Step 1: Summarize the data by Customer_Name and Product_Line
customer_product_revenue <- sen_mun %>%
group_by(Customer_Name, `Product Line`) %>%
summarise(
Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop'
) %>%
arrange(desc(Revenue))
# Step 2: Create the stacked bar chart
ggplot(customer_product_revenue, aes(x = reorder(Customer_Name, Revenue), y = Revenue, fill = `Product Line`)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue by Customer and Product Line",
x = "Customer Name",
y = "Revenue") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5), # Rotate x-axis labels for readability
legend.position = "bottom"
) +
scale_y_continuous(labels = scales::comma) # Format y-axis labels with commas for thousands
# Run this code in your R environment to generate the plot.
# Sort customers alphabetically
customer_product_revenue <- customer_product_revenue %>%
arrange(Customer_Name)
# Determine the midpoint to split the customer list into two halves
midpoint <- ceiling(nrow(customer_product_revenue) / 2)
# Create two separate data frames for each half
first_half_customers <- customer_product_revenue[1:midpoint, ]
second_half_customers <- customer_product_revenue[(midpoint + 1):nrow(customer_product_revenue), ]
# Plot for the first half of customers
ggplot(first_half_customers, aes(x = reorder(Customer_Name, Revenue), y = Revenue, fill = `Product Line`)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue by Customer and Product Line (First Half)",
x = "Customer Name",
y = "Revenue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.position = "bottom") +
scale_y_continuous(labels = scales::comma)
# Plot for the second half of customers
ggplot(second_half_customers, aes(x = reorder(Customer_Name, Revenue), y = Revenue, fill = `Product Line`)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue by Customer and Product Line (Second Half)",
x = "Customer Name",
y = "Revenue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.position = "bottom") +
scale_y_continuous(labels = scales::comma)
# Remember to run each plot command separately in RStudio to see each graph.
# Ensure the data is sorted alphabetically by Customer_Name
customer_product_revenue <- customer_product_revenue %>%
arrange(Customer_Name)
# Find the number of unique customers to split the dataframe in half
number_of_customers <- length(unique(customer_product_revenue$Customer_Name))
half <- number_of_customers %/% 2
# Split the data into two halves
first_half <- customer_product_revenue %>%
filter(Customer_Name %in% head(unique(Customer_Name), half))
second_half <- customer_product_revenue %>%
filter(Customer_Name %in% tail(unique(Customer_Name), number_of_customers - half))
# Create the plot for the first half
first_half_plot <- ggplot(first_half, aes(x = reorder(Customer_Name, -Revenue), y = Revenue, fill = `Product Line`)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue by Customer and Product Line (First Half)",
x = "Customer Name",
y = "Revenue") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.position = "bottom") +
scale_y_continuous(labels = scales::comma)
# Create the plot for the second half
second_half_plot <- ggplot(second_half, aes(x = reorder(Customer_Name, -Revenue), y = Revenue, fill = `Product Line`)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue by Customer and Product Line (Second Half)",
x = "Customer Name",
y = "Revenue") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.position = "bottom") +
scale_y_continuous(labels = scales::comma)
# You can view each plot by calling it in RStudio:
# first_half_plot
# second_half_plot
# And if you want to save them:
# ggsave("first_half_plot.png", first_half_plot, width = 11, height = 8.5, dpi = 300)
# ggsave("second_half_plot.png", second_half_plot, width = 11, height = 8.5, dpi = 300)
# Ensure the data is sorted alphabetically by Customer_Name
customer_product_revenue <- customer_product_revenue %>%
arrange(Customer_Name)
# Find the number of unique customers to split the dataframe in half
number_of_customers <- length(unique(customer_product_revenue$Customer_Name))
half <- number_of_customers %/% 2
# Split the data into two halves
first_half <- customer_product_revenue %>%
filter(Customer_Name %in% head(unique(Customer_Name), half))
second_half <- customer_product_revenue %>%
filter(Customer_Name %in% tail(unique(Customer_Name), number_of_customers - half))
# Create the plot for the first half
first_half_plot <- ggplot(first_half, aes(x = reorder(Customer_Name, -Revenue), y = Revenue, fill = `Product Line`)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue by Customer and Product Line (First Half)",
x = "Customer Name",
y = "Revenue") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.position = "bottom") +
scale_y_continuous(labels = scales::comma)
# Create the plot for the second half
second_half_plot <- ggplot(second_half, aes(x = reorder(Customer_Name, -Revenue), y = Revenue, fill = `Product Line`)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Revenue by Customer and Product Line (Second Half)",
x = "Customer Name",
y = "Revenue") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.position = "bottom") +
scale_y_continuous(labels = scales::comma)
# You can view each plot by calling it in RStudio:
# first_half_plot
# second_half_plot
# And if you want to save them:
# ggsave("first_half_plot.png", first_half_plot, width = 11, height = 8.5, dpi = 300)
# ggsave("second_half_plot.png", second_half_plot, width = 11, height = 8.5, dpi = 300)
first_half_plot
second_half_plot
# Read the datasets
sen_mun <- read_excel("/Users/loizoskon/Downloads/pal_com_cus.xlsx")
pal_com_cus
# Read the datasets
pal_com_cus <- read_excel("/Users/loizoskon/Downloads/pal_com_cus.xlsx")
pal_com_cus
# Step 1: Load necessary libraries
library(readxl)
library(dplyr)
library(ggplot2)
# Step 2: Read the datasets
sen_mun <- read_excel("/Users/loizoskon/Downloads/sen_municipals.xlsx", skip = 1)
sen_mun
# Read the datasets
pal_com_cus <- read_excel("/Users/loizoskon/Downloads/pal_com_cus.xlsx")
pal_com_cus
# Assuming the pal_com_cus dataset is already loaded and looks like the provided screenshot
# Summarize the data by Customer_Name
customer_revenue_summary <- pal_com_cus %>%
group_by(Customer_Name) %>%
summarise(
Total_Revenue_GBP = sum(Total_RevGBP, na.rm = TRUE),
Region = first(Region), # Assuming each customer belongs to a single Region
.groups = 'drop'
) %>%
arrange(desc(Total_Revenue_GBP))
# Assuming the pal_com_cus dataset is already loaded and looks like the provided screenshot
# Summarize the data by Customer_Name
customer_revenue_summary <- pal_com_cus %>%
group_by(Palintest_customers) %>%
summarise(
TotalRevGBP = sum(Total_RevGBP, na.rm = TRUE),
Region = first(Region), # Assuming each customer belongs to a single Region
.groups = 'drop'
) %>%
arrange(desc(TotalRevGBP))
# Create a bar chart
ggplot(customer_revenue_summary, aes(x = reorder(`Palintest_customers`, `TotalRevGBP`), y = TotalRevGBP, fill = Region)) +
geom_bar(stat = "identity") +
labs(title = "Revenue by Customer and Region",
x = "Customer Name",
y = "Total Revenue (GBP)") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5),
legend.position = "bottom") +
scale_y_continuous(labels = scales::comma)
# Run this code in RStudio to generate the plot.
library(dplyr)
library(ggplot2)
# Load your dataset if not already loaded
# sen_mun <- readxl::read_xlsx("path_to_your_sen_mun_file.xlsx")
# Summarize the data by Customer_Name
customer_revenue_summary <- sen_mun %>%
group_by(Customer_Name) %>%
summarise(
Total_Revenue = sum(Rev, na.rm = TRUE),
.groups = 'drop' # This drops the grouping so that it's easier to work with the data frame afterward
) %>%
arrange(desc(Total_Revenue))
customer_revenue_summary
# Assuming your sen_mun dataset is already loaded and contains a column 'Customer_Name'
# Summarize the data by Customer_Name
cust_names <- sen_mun %>%
distinct(Customer_Name) %>%
arrange(Customer_Name) %>%
pull(Customer_Name)
# customer_names will contain all unique customer names sorted alphabetically
print(cust_names)
