{
  "hash": "750466587ad080d0fa611e232806629c",
  "result": {
    "markdown": "---\ntitle: \"{dm} is fantastic!\"\ndescription: |\n  A quick overview of the {dm} package for working with relational data      models in R.\ndate: 05/09-/2021\ncategories:\n  - R\n  - SQL\nimage: dm.png\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n<style type=\"text/css\">\nd-article pre {\noverflow: auto !important;\n}\n</style>\n:::\n\n\n\nSometimes as an R user you may find yourself needing to work with data that is stored in a remote database, but want to continue to use your R-orientated workflow. The `dm` package by [Kirill Müller](https://www.cynkra.com/about.html) provides some great tools for doing exactly that, and in this post I wanted to share some of the functions I've found particularly useful. \n\nNow, you may already be familiar with the `dbplyr` package which allows you to use the majority of dplyr/tidyr functions on a remote table by auto-magically converting these commands into the necessary SQL and returning the result back to R when you call `collect()`. `dm` extends this concept and adds extra functionality for working with the whole database, making it a very valuable tool. For the examples in this post, I've set up a local SQL server, and copied over the `dm::dm_nycflights13()` example database that is included in the `dm` package.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Setup for examples using SQL server\n\ncon <- DBI::dbConnect(odbc::odbc(),\n                      Driver   = \"ODBC Driver 17 for SQL Server\",\n                      Server   = \"localhost\",\n                      UID      = Sys.getenv(\"SQL_user\"),\n                      PWD      = Sys.getenv(\"SQL_password\"),\n                      Port     = 1433)\n\nflights <- dm_nycflights13()\n\nDBI::dbSendQuery(con, \"CREATE DATABASE nycflights\")\n\ncopy_dm_to(con, dm = flights, temporary = FALSE)\n```\n:::\n\nNext I rerun the connection, but this time specifying the newly created `nycflights` database.\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- DBI::dbConnect(odbc::odbc(),\n                      Driver   = \"ODBC Driver 17 for SQL Server\",\n                      Server   = \"localhost\",\n                      Database = \"nycflights\",\n                      UID      = Sys.getenv(\"SQL_user\"),\n                      PWD      = Sys.getenv(\"SQL_password\"),\n                      Port     = 1433)\n```\n:::\n\nNow our data is in the database we can begin working with it. To connect to the database and learn the connections, we can use `dm_from_src()`. Setting the `learn_keys` argument to `TRUE` means dm will attempt to discover the primary and foreign keys between the tables, however this currently only works with Postgres and SQL Server databases.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights <- dm_from_src(con, learn_keys = TRUE)\n\nflights\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; <span style='color: #00BB00;'>──</span> <span style='color: #00BB00;'>Table source</span> <span style='color: #00BB00;'>───────────────────────────────────────────────────────────</span>\n#&gt; src:  Microsoft SQL Server 15.00.4138[dbo@h-xps/nycflights]\n#&gt; <span style='color: #555555;'>──</span> <span style='color: #555555;'>Metadata</span> <span style='color: #555555;'>───────────────────────────────────────────────────────────────</span>\n#&gt; Tables: `airlines`, `airports`, `flights`, `planes`, `weather`, `mtcars`\n#&gt; Columns: 64\n#&gt; Primary keys: 3\n#&gt; Foreign keys: 2\n</CODE></PRE>\n:::\n\nA really great feature of `dm` is the ability to plot the database to visualise the links between tables. We can do this by using the `dm_draw()` function\n\n::: {.cell}\n\n```{.r .cell-code}\ndm_draw(flights)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-c58fce1397a53d10617e\" style=\"width:100%;height:464px;\" class=\"grViz html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-c58fce1397a53d10617e\">{\"x\":{\"diagram\":\"#data_model\\ndigraph {\\ngraph [rankdir=LR tooltip=\\\"Data Model\\\" ]\\n\\nnode [margin=0 fontcolor = \\\"#444444\\\" ]\\n\\nedge [color = \\\"#555555\\\", arrowsize = 1, ]\\n\\npack=true\\npackmode= \\\"node\\\"\\n\\n  \\\"airlines\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">airlines<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"carrier\\\"><U>carrier<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"airports\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">airports<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"faa\\\"><U>faa<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"flights\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">flights<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"carrier\\\">carrier<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"origin\\\">origin<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"mtcars\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">mtcars<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"planes\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">planes<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"tailnum\\\"><U>tailnum<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"weather\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">weather<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n\\\"flights\\\":\\\"carrier\\\"->\\\"airlines\\\":\\\"carrier\\\"\\n\\\"flights\\\":\\\"origin\\\"->\\\"airports\\\":\\\"faa\\\"\\n}\",\"config\":{\"engine\":null,\"options\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nNow, there is a small issue with the nycflights data in that some of the `tailnum` values are not present in both the flights and planes table. However, we can manually create the link by adding an additional foreign key using `dm_add_fk()`.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights <- flights %>% \n  dm_add_fk(table = flights, columns = tailnum, ref_table = planes)\n\nflights\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; <span style='color: #00BB00;'>──</span> <span style='color: #00BB00;'>Table source</span> <span style='color: #00BB00;'>───────────────────────────────────────────────────────────</span>\n#&gt; src:  Microsoft SQL Server 15.00.4138[dbo@h-xps/nycflights]\n#&gt; <span style='color: #555555;'>──</span> <span style='color: #555555;'>Metadata</span> <span style='color: #555555;'>───────────────────────────────────────────────────────────────</span>\n#&gt; Tables: `airlines`, `airports`, `flights`, `planes`, `weather`, `mtcars`\n#&gt; Columns: 64\n#&gt; Primary keys: 3\n#&gt; Foreign keys: 3\n</CODE></PRE>\n:::\n\nAnd if we draw the model again we can see that planes is now connected to the flights table. I've also added some extra styling to show how easy it is to customise these plots with `dm`. \n\n::: {.column-margin}\nYou can use `dm_get_available_colors()` to see all possible colours\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  dm_set_colors(\n    salmon4 = flights,\n    violetred1 = airlines,\n    royalblue4 = planes,\n    wheat = airports\n  ) %>% \n  dm_draw(rankdir = \"TB\",\n          view_type = \"title_only\",\n          edge_attrs = \"arrowhead = vee\")\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-8261949c8f29c1f61007\" style=\"width:100%;height:464px;\" class=\"grViz html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8261949c8f29c1f61007\">{\"x\":{\"diagram\":\"#data_model\\ndigraph {\\ngraph [rankdir=TB tooltip=\\\"Data Model\\\" ]\\n\\nnode [margin=0 fontcolor = \\\"#444444\\\" ]\\n\\nedge [color = \\\"#555555\\\", arrowsize = 1, arrowhead = vee]\\n\\npack=true\\npackmode= \\\"node\\\"\\n\\n  \\\"airlines\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#AA2964AA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#FF3E96FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">airlines<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"airports\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#A39477AA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#F5DEB3FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">airports<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"flights\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#5C3226AA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#8B4C39FF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">flights<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"mtcars\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">mtcars<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"planes\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#1A2A5CAA\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#27408BFF\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#FFFFFF\\\">planes<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"weather\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">weather<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n\\\"flights\\\":\\\"carrier\\\"->\\\"airlines\\\":\\\"carrier\\\"\\n\\\"flights\\\":\\\"origin\\\"->\\\"airports\\\":\\\"faa\\\"\\n\\\"flights\\\":\\\"tailnum\\\"->\\\"planes\\\":\\\"tailnum\\\"\\n}\",\"config\":{\"engine\":null,\"options\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n## Working with the data\n\nSo, now we have a data model set up we can begin working with it. `dm` contains a range of `dm_*` functions that work in a similar way to their `dpylr` equivalents, but they can affect the whole data model object. For example, we can select certain tables and use filters on the whole data model. Lets drop the `weather` table as we aren't too interested in weather for the time being.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights <- flights %>% \n  dm_select_tbl(-weather)\n\nflights\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; <span style='color: #00BB00;'>──</span> <span style='color: #00BB00;'>Table source</span> <span style='color: #00BB00;'>───────────────────────────────────────────────────────────</span>\n#&gt; src:  Microsoft SQL Server 15.00.4138[dbo@h-xps/nycflights]\n#&gt; <span style='color: #555555;'>──</span> <span style='color: #555555;'>Metadata</span> <span style='color: #555555;'>───────────────────────────────────────────────────────────────</span>\n#&gt; Tables: `airlines`, `airports`, `flights`, `planes`, `mtcars`\n#&gt; Columns: 49\n#&gt; Primary keys: 3\n#&gt; Foreign keys: 3\n</CODE></PRE>\n:::\n\nBy printing the dm object, we can see the `weather` table is no longer part of the dm object.\n\nLets say we are particular interested in finding out about Alaska Airlines Inc. We can use `dm_filter()` to find all the linked information for this airline in our data model.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_filt <- flights %>% \n  dm_filter(flights, carrier == \"AA\") \n\nflights_filt\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; <span style='color: #00BB00;'>──</span> <span style='color: #00BB00;'>Table source</span> <span style='color: #00BB00;'>───────────────────────────────────────────────────────────</span>\n#&gt; src:  Microsoft SQL Server 15.00.4138[dbo@h-xps/nycflights]\n#&gt; <span style='color: #555555;'>──</span> <span style='color: #555555;'>Metadata</span> <span style='color: #555555;'>───────────────────────────────────────────────────────────────</span>\n#&gt; Tables: `airlines`, `airports`, `flights`, `planes`, `mtcars`\n#&gt; Columns: 49\n#&gt; Primary keys: 3\n#&gt; Foreign keys: 3\n#&gt; <span style='color: #BBBB00;'>──</span> <span style='color: #BBBB00;'>Filters</span> <span style='color: #BBBB00;'>────────────────────────────────────────────────────────────────</span>\n#&gt; flights: carrier == &quot;AA&quot;\n</CODE></PRE>\n:::\n\nNow we can see we have some additional information regarding the filter when we print the data model. In order to apply this filter, we have a couple of possibilities. If we were interested in returning all the rows in the `airports` table, we could apply this filter directly to that table using `dm_apply_filters_to_tbl()`.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_filt %>% \n  dm_apply_filters_to_tbl(airports)\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; <span style='color: #555555;'># Source:   lazy query [?? x 8]</span>\n#&gt; <span style='color: #555555;'># Database: Microsoft SQL Server 15.00.4138[dbo@h-xps/nycflights]</span>\n#&gt;   faa   name                  lat   lon   alt    tz dst   tzone           \n#&gt;   <span style='color: #555555; font-style: italic;'>&lt;chr&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;chr&gt;</span>               <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;chr&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;chr&gt;</span>           \n#&gt; <span style='color: #555555;'>1</span> LGA   La Guardia           40.8 -<span style='color: #BB0000;'>73.9</span>    22    -<span style='color: #BB0000;'>5</span> A     America/New_York\n#&gt; <span style='color: #555555;'>2</span> EWR   Newark Liberty Intl  40.7 -<span style='color: #BB0000;'>74.2</span>    18    -<span style='color: #BB0000;'>5</span> A     America/New_York\n#&gt; <span style='color: #555555;'>3</span> JFK   John F Kennedy Intl  40.6 -<span style='color: #BB0000;'>73.8</span>    13    -<span style='color: #BB0000;'>5</span> A     America/New_York\n</CODE></PRE>\n:::\n\nSometimes, we might want to return all tables with the filter applied. dm provides the `dm_flattern_to_tbl()` function to do exactly that. First we need to apply the filter to the dm object, and then we can \"flattern\" to a single table, specifying the type of join we would like to use. `dm` will create the joins based on the keys already defined in the dm object.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_filt %>% \n  dm_apply_filters() %>% \n  dm_flatten_to_tbl(start = flights, airports, planes, join = left_join)\n```\n\n::: {.cell-output-stderr}\n```\n#> Renamed columns:\n#> * year -> flights.year, planes.year\n```\n:::\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; <span style='color: #555555;'># Source:   lazy query [?? x 34]</span>\n#&gt; <span style='color: #555555;'># Database: Microsoft SQL Server 15.00.4138[dbo@h-xps/nycflights]</span>\n#&gt;    flights.year month   day dep_time sched_dep_time dep_delay arr_time\n#&gt;           <span style='color: #555555; font-style: italic;'>&lt;int&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;int&gt;</span> <span style='color: #555555; font-style: italic;'>&lt;int&gt;</span>    <span style='color: #555555; font-style: italic;'>&lt;int&gt;</span>          <span style='color: #555555; font-style: italic;'>&lt;int&gt;</span>     <span style='color: #555555; font-style: italic;'>&lt;dbl&gt;</span>    <span style='color: #555555; font-style: italic;'>&lt;int&gt;</span>\n#&gt; <span style='color: #555555;'> 1</span>         <span style='text-decoration: underline;'>2</span>013     1    10      531            540        -<span style='color: #BB0000;'>9</span>      832\n#&gt; <span style='color: #555555;'> 2</span>         <span style='text-decoration: underline;'>2</span>013     1    10      553            600        -<span style='color: #BB0000;'>7</span>      837\n#&gt; <span style='color: #555555;'> 3</span>         <span style='text-decoration: underline;'>2</span>013     1    10      555            600        -<span style='color: #BB0000;'>5</span>      733\n#&gt; <span style='color: #555555;'> 4</span>         <span style='text-decoration: underline;'>2</span>013     1    10      604            610        -<span style='color: #BB0000;'>6</span>      851\n#&gt; <span style='color: #555555;'> 5</span>         <span style='text-decoration: underline;'>2</span>013     1    10      604            610        -<span style='color: #BB0000;'>6</span>      858\n#&gt; <span style='color: #555555;'> 6</span>         <span style='text-decoration: underline;'>2</span>013     1    10      625            630        -<span style='color: #BB0000;'>5</span>      753\n#&gt; <span style='color: #555555;'> 7</span>         <span style='text-decoration: underline;'>2</span>013     1    10      633            630         3     <span style='text-decoration: underline;'>1</span>142\n#&gt; <span style='color: #555555;'> 8</span>         <span style='text-decoration: underline;'>2</span>013     1    10      652            659        -<span style='color: #BB0000;'>7</span>      942\n#&gt; <span style='color: #555555;'> 9</span>         <span style='text-decoration: underline;'>2</span>013     1    10      659            700        -<span style='color: #BB0000;'>1</span>     <span style='text-decoration: underline;'>1</span>013\n#&gt; <span style='color: #555555;'>10</span>         <span style='text-decoration: underline;'>2</span>013     1    10      700            700         0      837\n#&gt; <span style='color: #555555;'># … with more rows, and 27 more variables: sched_arr_time &lt;int&gt;,</span>\n#&gt; <span style='color: #555555;'>#   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,</span>\n#&gt; <span style='color: #555555;'>#   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,</span>\n#&gt; <span style='color: #555555;'>#   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, name &lt;chr&gt;, lat &lt;dbl&gt;, lon &lt;dbl&gt;,</span>\n#&gt; <span style='color: #555555;'>#   alt &lt;dbl&gt;, tz &lt;dbl&gt;, dst &lt;chr&gt;, tzone &lt;chr&gt;, planes.year &lt;int&gt;,</span>\n#&gt; <span style='color: #555555;'>#   type &lt;chr&gt;, manufacturer &lt;chr&gt;, model &lt;chr&gt;, engines &lt;int&gt;,</span>\n#&gt; <span style='color: #555555;'>#   seats &lt;int&gt;, speed &lt;int&gt;, engine &lt;chr&gt;</span>\n</CODE></PRE>\n:::\n\nThe `start` argument is the table that we want to join the others onto. You can optionally supply tables names that you want to join (in this case airports and planes), or specify nothing to join _all_ tables. Finally you can also specify the type of join you would like to use (`left_join` is the default).\n\nBefore flattening to a single table, it can sometimes be useful to see how many rows each tables has after you have applied the filter.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_filt %>% \n  dm_apply_filters() %>% \n  dm_nrow()\n```\n\n::: {.cell-output-stdout}\n```\n#> airlines airports  flights   planes   mtcars \n#>        1        3     1089      118       32\n```\n:::\n:::\n\nThis can be good to double check the filter has done what you think it was going to do!\n\nTo see what's going on under the hood here, we can use `show_query()`.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_filt %>% \n  dm_apply_filters() %>% \n  dm_flatten_to_tbl(start = flights, airports, planes, join = left_join) %>% \n  show_query()\n```\n\n::: {.cell-output-stderr}\n```\n#> Renamed columns:\n#> * year -> flights.year, planes.year\n```\n:::\n\n::: {.cell-output-stdout}\n```\n#> <SQL>\n#> SELECT \"flights.year\", \"month\", \"day\", \"dep_time\", \"sched_dep_time\", \"dep_delay\", \"arr_time\", \"sched_arr_time\", \"arr_delay\", \"carrier\", \"flight\", \"LHS\".\"tailnum\" AS \"tailnum\", \"origin\", \"dest\", \"air_time\", \"distance\", \"hour\", \"minute\", \"time_hour\", \"name\", \"lat\", \"lon\", \"alt\", \"tz\", \"dst\", \"tzone\", \"planes.year\", \"type\", \"manufacturer\", \"model\", \"engines\", \"seats\", \"speed\", \"engine\"\n#> FROM (SELECT \"flights.year\", \"month\", \"day\", \"dep_time\", \"sched_dep_time\", \"dep_delay\", \"arr_time\", \"sched_arr_time\", \"arr_delay\", \"carrier\", \"flight\", \"tailnum\", \"origin\", \"dest\", \"air_time\", \"distance\", \"hour\", \"minute\", \"time_hour\", \"name\", \"lat\", \"lon\", \"alt\", \"tz\", \"dst\", \"tzone\"\n#> FROM (SELECT \"year\" AS \"flights.year\", \"month\", \"day\", \"dep_time\", \"sched_dep_time\", \"dep_delay\", \"arr_time\", \"sched_arr_time\", \"arr_delay\", \"carrier\", \"flight\", \"tailnum\", \"origin\", \"dest\", \"air_time\", \"distance\", \"hour\", \"minute\", \"time_hour\"\n#> FROM \"dbo\".\"flights\"\n#> WHERE (\"carrier\" = 'AA')) \"LHS\"\n#> LEFT JOIN (SELECT * FROM \"dbo\".\"airports\" AS \"LHS\"\n#> WHERE EXISTS (\n#>   SELECT 1 FROM (SELECT *\n#> FROM \"dbo\".\"flights\"\n#> WHERE (\"carrier\" = 'AA')) \"RHS\"\n#>   WHERE (\"LHS\".\"faa\" = \"RHS\".\"origin\")\n#> )) \"RHS\"\n#> ON (\"LHS\".\"origin\" = \"RHS\".\"faa\")\n#> ) \"LHS\"\n#> LEFT JOIN (SELECT \"tailnum\", \"year\" AS \"planes.year\", \"type\", \"manufacturer\", \"model\", \"engines\", \"seats\", \"speed\", \"engine\"\n#> FROM (SELECT * FROM \"dbo\".\"planes\" AS \"LHS\"\n#> WHERE EXISTS (\n#>   SELECT 1 FROM (SELECT *\n#> FROM \"dbo\".\"flights\"\n#> WHERE (\"carrier\" = 'AA')) \"RHS\"\n#>   WHERE (\"LHS\".\"tailnum\" = \"RHS\".\"tailnum\")\n#> )) \"q01\") \"RHS\"\n#> ON (\"LHS\".\"tailnum\" = \"RHS\".\"tailnum\")\n```\n:::\n:::\n\nSo with just a few line of code we were able to generate this fairly lengthy SQL statement. Pretty neat 😎.\n\n## Zooming with dm's\n\nAnther cool feature in  dm is the ability to \"zoom\" into a table and use a dplyr style workflow on that table. This will be very familiar if you have ever used `dbplyr`. Lets zoom into the `planes` table and find the mean number of seats for each manufacturer.\n\n::: {.cell}\n\n```{.r .cell-code}\nzoomed <- flights_filt %>% \n  dm_zoom_to(planes) %>% \n  group_by(manufacturer) %>% \n  summarise(mean_seats = mean(seats, na.rm = TRUE)) %>% \n  arrange(desc(mean_seats))\n\nzoomed\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; <span style='color: #555555;'># Zoomed table: planes</span>\n#&gt; <span style='color: #555555;'># Source:       lazy query [?? x 2]</span>\n#&gt; <span style='color: #555555;'># Database:     Microsoft SQL Server 15.00.4138[dbo@h-xps/nycflights]</span>\n#&gt; <span style='color: #555555;'># Ordered by:   desc(mean_seats)</span>\n#&gt;    manufacturer                  mean_seats\n#&gt;    <span style='color: #555555; font-style: italic;'>&lt;chr&gt;</span>                              <span style='color: #555555; font-style: italic;'>&lt;int&gt;</span>\n#&gt; <span style='color: #555555;'> 1</span> AIRBUS                               221\n#&gt; <span style='color: #555555;'> 2</span> AIRBUS INDUSTRIE                     187\n#&gt; <span style='color: #555555;'> 3</span> BOEING                               175\n#&gt; <span style='color: #555555;'> 4</span> MCDONNELL DOUGLAS                    162\n#&gt; <span style='color: #555555;'> 5</span> MCDONNELL DOUGLAS CORPORATION        142\n#&gt; <span style='color: #555555;'> 6</span> MCDONNELL DOUGLAS AIRCRAFT CO        142\n#&gt; <span style='color: #555555;'> 7</span> DOUGLAS                              102\n#&gt; <span style='color: #555555;'> 8</span> BOMBARDIER INC                        74\n#&gt; <span style='color: #555555;'> 9</span> CANADAIR                              55\n#&gt; <span style='color: #555555;'>10</span> EMBRAER                               45\n#&gt; <span style='color: #555555;'># … with more rows</span>\n</CODE></PRE>\n:::\n\nAfter using `dm_zoom_to()` to select the planes table the rest of the code should look fairly familiar. We now have a couple of options for what we want to do with our new zoomed in table. We might want to overwrite the existing planes table with our new summary table. If that was the case we could use the `dm_update_zoomed()` to replace the original table with the one we have just created. An alternative (a potentially less destructive) approach is to create a new table containing the summary information.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_updated <- zoomed %>% \n  dm_insert_zoomed(new_tbl_name = \"planes_summary\")\n\nflights_updated\n```\n\n<PRE class=\"fansi fansi-output\"><CODE>#&gt; <span style='color: #00BB00;'>──</span> <span style='color: #00BB00;'>Table source</span> <span style='color: #00BB00;'>───────────────────────────────────────────────────────────</span>\n#&gt; src:  Microsoft SQL Server 15.00.4138[dbo@h-xps/nycflights]\n#&gt; <span style='color: #555555;'>──</span> <span style='color: #555555;'>Metadata</span> <span style='color: #555555;'>───────────────────────────────────────────────────────────────</span>\n#&gt; Tables: `airlines`, `airports`, `flights`, `planes`, `mtcars`, `planes_summary`\n#&gt; Columns: 51\n#&gt; Primary keys: 3\n#&gt; Foreign keys: 3\n#&gt; <span style='color: #BBBB00;'>──</span> <span style='color: #BBBB00;'>Filters</span> <span style='color: #BBBB00;'>────────────────────────────────────────────────────────────────</span>\n#&gt; flights: carrier == &quot;AA&quot;\n</CODE></PRE>\n:::\n\nNow this particular summary table doesn't need to link to any of the other tables, but the [dm zoomed vingette](https://cynkra.github.io/dm/articles/tech-dm-zoom.html) provides lots of great examples for how one might link summary tables into the dm object.\n\n::: {.cell}\n\n```{.r .cell-code}\ndm_draw(flights_updated)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-992dc1e200339e36f575\" style=\"width:100%;height:464px;\" class=\"grViz html-widget\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-992dc1e200339e36f575\">{\"x\":{\"diagram\":\"#data_model\\ndigraph {\\ngraph [rankdir=LR tooltip=\\\"Data Model\\\" ]\\n\\nnode [margin=0 fontcolor = \\\"#444444\\\" ]\\n\\nedge [color = \\\"#555555\\\", arrowsize = 1, ]\\n\\npack=true\\npackmode= \\\"node\\\"\\n\\n  \\\"airlines\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">airlines<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"carrier\\\"><U>carrier<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"airports\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">airports<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"faa\\\"><U>faa<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"flights\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">flights<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"carrier\\\">carrier<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"tailnum\\\">tailnum<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"origin\\\">origin<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"mtcars\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">mtcars<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"planes\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">planes<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n    <TR>\\n      <TD ALIGN=\\\"LEFT\\\" BGCOLOR=\\\"#FFFFFF\\\" PORT=\\\"tailnum\\\"><U>tailnum<\\/U><\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n  \\\"planes_summary\\\" [label = <<TABLE ALIGN=\\\"LEFT\\\" BORDER=\\\"1\\\" CELLBORDER=\\\"0\\\" CELLSPACING=\\\"0\\\" COLOR=\\\"#555555\\\">\\n    <TR>\\n      <TD COLSPAN=\\\"1\\\" BGCOLOR=\\\"#EFEBDD\\\" BORDER=\\\"0\\\"><FONT COLOR=\\\"#000000\\\">planes_summary<\\/FONT>\\n<\\/TD>\\n    <\\/TR>\\n  <\\/TABLE>>, shape = \\\"plaintext\\\"] \\n\\n\\\"flights\\\":\\\"carrier\\\"->\\\"airlines\\\":\\\"carrier\\\"\\n\\\"flights\\\":\\\"origin\\\"->\\\"airports\\\":\\\"faa\\\"\\n\\\"flights\\\":\\\"tailnum\\\"->\\\"planes\\\":\\\"tailnum\\\"\\n}\",\"config\":{\"engine\":null,\"options\":null}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nHowever, we may want to access this table and include it in our report. We can access a specific table easily by using the `pull_tbl()` function.\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_updated %>% \n  pull_tbl(planes_summary) %>% \n  collect() %>% \n  reactable::reactable()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"htmlwidget-fb0213185b332674df6a\" class=\"reactable html-widget\" style=\"width:auto;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-fb0213185b332674df6a\">{\"x\":{\"tag\":{\"name\":\"Reactable\",\"attribs\":{\"data\":{\"manufacturer\":[\"AIRBUS\",\"AIRBUS INDUSTRIE\",\"BOEING\",\"MCDONNELL DOUGLAS\",\"MCDONNELL DOUGLAS AIRCRAFT CO\",\"MCDONNELL DOUGLAS CORPORATION\",\"DOUGLAS\",\"BOMBARDIER INC\",\"CANADAIR\",\"EMBRAER\",\"GULFSTREAM AEROSPACE\",\"DEHAVILLAND\",\"SIKORSKY\",\"AVIONS MARCEL DASSAULT\",\"LEARJET INC\",\"BEECH\",\"BELL\",\"AGUSTA SPA\",\"PIPER\",\"CESSNA\",\"ROBINSON HELICOPTER CO\",\"CIRRUS DESIGN CORP\",\"KILDALL GARY\",\"HURLEY JAMES LARRY\",\"CANADAIR LTD\",\"JOHN G HESS\",\"MARZ BARRY\",\"PAIR MIKE E\",\"FRIEDEMANN JON\",\"AVIAT AIRCRAFT INC\",\"LAMBERT RICHARD\",\"AMERICAN AIRCRAFT INC\",\"BARKER JACK L\",\"LEBLANC GLENN T\",\"STEWART MACO\"],\"mean_seats\":[221,187,175,162,142,142,102,74,55,45,22,16,14,12,11,9,8,8,6,5,5,4,2,2,2,2,2,2,2,2,2,2,2,2,2]},\"columns\":[{\"accessor\":\"manufacturer\",\"name\":\"manufacturer\",\"type\":\"character\"},{\"accessor\":\"mean_seats\",\"name\":\"mean_seats\",\"type\":\"numeric\"}],\"defaultPageSize\":10,\"paginationType\":\"numbers\",\"showPageInfo\":true,\"minRows\":1,\"dataKey\":\"5ce4c706e174c39f8edd4a9c74c91c57\",\"key\":\"5ce4c706e174c39f8edd4a9c74c91c57\"},\"children\":[]},\"class\":\"reactR_markup\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\nNice!\n\n## Conclusion\n\nSo that was a quick overview of some of the functions I've found particularly useful. `dm` can do much more though so check out the site https://cynkra.github.io/dm/index.html which contains a great mix of tutorials and technical articles which make the package extremely accessible and fun to use. \n\nThanks for reading!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.5.4/htmlwidgets.js\"></script>\n<script src=\"../../site_libs/viz-1.8.2/viz.js\"></script>\n<link href=\"../../site_libs/DiagrammeR-styles-0.2/styles.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/grViz-binding-1.0.6.1/grViz.js\"></script>\n<script src=\"../../site_libs/core-js-2.5.3/shim.min.js\"></script>\n<script src=\"../../site_libs/react-17.0.0/react.min.js\"></script>\n<script src=\"../../site_libs/react-17.0.0/react-dom.min.js\"></script>\n<script src=\"../../site_libs/reactwidget-1.0.0/react-tools.js\"></script>\n<script src=\"../../site_libs/reactable-binding-0.2.3/reactable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}