{
  "hash": "35be180f215337aa238d15b9f3b88212",
  "result": {
    "markdown": "---\ntitle: \"Introducing {qbr}.\"\ndescription: |\n  An R interface to jquery Query-Builder.\ndate: 06/20/2021\nimage: qbr.png\ncategories:\n  - R\n  - javascript\n---\n\n\n\n**Feburary 2022 Update**\n\nDear reader, if you've just landed on this page, there have been some major changes the `qbr` since this post was written and you should checkout [this post](https://www.hfshr.xyz/posts/2021-06-20-qbr-update), or the [documentation](https://hfshr.github.io/qbr/#/) to get up to speed with the current version!\n\n---\n\nI've been spending quite a bit of time in the world of shiny recently, and a particular problem I was facing meant I decided to dip my toe into the seemingly magical world of [htmlwidgets](https://www.htmlwidgets.org/). In brief, I needed a way for users to interactively construct complex queries that would be used to interrogate a large database. While this is certainly possible to do using native shiny inputs, I ~~was being lazy~~ wanted to see if I could leverage something that had already been created. After a bit of googling I came across [queryBuilder](https://querybuilder.js.org/index.html), a jquery plugin that provides UI component to create queries and filters. After playing around with the demos on the site, I was very impressed with the functionality and, and even better, someone had already made an R wrapper for the library! (See [harveyl888/queryBuilder](https://github.com/harveyl888/queryBuilder) and [Yannael/queryBuildR](https://github.com/Yannael/queryBuildR)).\n\nHowever this was where I started to run into some problems. The original queryBuilder has a vast array of settings that can be configured, including additional plugins and widgets that help add additional functionality to the builder. The existing R wrappers for queryBuilder only implemented a few of these settings, and I found myself wanting to access other settings which were not yet implemented. So I thought I'd have a go at creating my own version, taking inspiration from [harveyl888/queryBuilder](https://github.com/harveyl888/queryBuilder) with the aim of including as much of the functionality as possible of the original queryBuilder. \n\n## Example\n\nYou can install `qbr` from github:\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"remotes\")\nremotes::install_github(\"hfshr/qbr\")\n```\n:::\n\nand also check out the repository here: [hfshr/qbr](https://github.com/hfshr/qbr)\n\nHere is a quick example in shiny filtering the palmer penguins dataset with a few of the different settings configured. Code for the app is also below.\n\n::: {.column-margin}\n[https://harryfish.shinyapps.io/qbr_demo/](https://harryfish.shinyapps.io/qbr_demo/)\n:::\n\n::: {.cell code_folding='true'}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(qbr)\n\nui <- fluidPage(\n  # Application title\n  titlePanel(\"QueryBuilder demo\"),\n  mainPanel(\n    fluidRow(\n      column(\n        8,\n        queryBuilderOutput(\"querybuilder\",\n          width = 620,\n          height = 300\n        )\n      ),\n      column(\n        4,\n        uiOutput(\"txtValidation\")\n      )\n    )\n  ),\n  fluidRow(\n    column(\n      width = 6,\n      h3(\"dplyr filter\"),\n      verbatimTextOutput(\"txtFilterList\"),\n    ),\n    column(\n      width = 6,\n      h3(\"SQL filter\"),\n      verbatimTextOutput(\"txtSQL\")\n    )\n  ),\n  fluidRow(\n    column(\n      width = 12,\n      h3(\"dplyr filter applied to a table\"),\n      dataTableOutput(\"txtFilterResult\")\n    )\n  )\n)\n\n# Define server logic required to draw a histogram\nserver <- function(input, output) {\n  filters <- list(\n    list(\n      id = \"species\",\n      label = \"Species\",\n      type = \"string\",\n      input = \"select\",\n      description = \"Shift-click to select multiple!\",\n      values = list(\"Adelie\", \"Gentoo\", \"Chinstrap\"),\n      multiple = TRUE,\n      operators = c(\"equal\", \"not_equal\", \"in\")\n    ),\n    list(\n      id = \"sex\",\n      label = \"Sex\",\n      input = \"checkbox\",\n      values = list(\n        \"male\",\n        \"female\"\n      ),\n      operators = c(\"equal\", \"not_equal\", \"in\")\n    ),\n    list(\n      id = \"bill_length_mm\",\n      label = \"Bill length\",\n      type = \"integer\",\n      validation = list(\n        min = 0,\n        max = 100\n      ),\n      plugin = \"slider\",\n      plugin_config = list(\n        min = 0,\n        max = 100,\n        value = 0\n      )\n    )\n  )\n\n  output$txtValidation <- renderUI({\n    if (isFALSE(input$querybuilder_validate) || is.null(input$querybuilder_validate)) {\n      h3(\"INVALID QUERY\", style = \"color:red\")\n    } else {\n      h3(\"VALID QUERY\", style = \"color:green\")\n    }\n  })\n\n  output$querybuilder <- renderQueryBuilder({\n    queryBuilder(\n      filters = filters,\n      plugins = list(\n        \"sortable\" = NA,\n        \"bt-tooltip-errors\" = NA,\n        \"bt-checkbox\" = list(\"color\" = \"primary\"),\n        \"filter-description\" = list(\"mode\" = \"bootbox\"),\n        \"unique-filter\" = NA\n      ),\n      display_errors = TRUE,\n      allow_empty = FALSE,\n      select_placeholder = \"###\"\n    )\n  })\n\n  output$txtFilterList <- renderPrint({\n    req(input$querybuilder_validate)\n    filterTable(\n      filters = input$querybuilder_out,\n      data = palmerpenguins::penguins,\n      output = \"text\"\n    )\n  })\n\n\n  output$txtFilterResult <- renderDataTable(\n    {\n      req(input$querybuilder_validate)\n      filterTable(\n        filters = input$querybuilder_out,\n        data = palmerpenguins::penguins,\n        output = \"table\"\n      )\n    },\n    options = list(\n      pageLength = 5,\n      scrollY = \"200px\",\n      scrollX = TRUE\n    )\n  )\n\n  output$txtSQL <- renderPrint({\n    req(input$querybuilder_validate)\n    input$querybuilder_sql\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n```\n:::\n\n\n::: {.column-screen-inset}\n<iframe src =\"https://harryfish.shinyapps.io/qbr_demo/\" allowfullscreen =\"\"\nscrolling=\"yes\" width = \"100%\" height = \"800px\" frameboarder=\"0\"  data-external=\"1\"></iframe>\n:::\n\n## Summary\n\nThese settings barely scratch the surface of what is possible and the original queryBuilder site (https://querybuilder.js.org/) is well worth a visit to see the full potential of the widget. Also a special thanks to [harveyl888/queryBuilder](https://github.com/harveyl888/queryBuilder) on which `qbr` is heavily based. If you find something that isn't implemented feel free to open an issue [hfshr/qbr](https://github.com/hfshr/qbr/issues).\n\nThanks for reading!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}