{
  "hash": "2b97269f0ad91c7e5705c94112558972",
  "result": {
    "markdown": "---\ntitle: \"Zero to consciously incompetent with {Rcpp}.\"\ndescription: |\n  Exploring the world of {Rcpp} through the eyes of a complete novice.\ndate: 04/04/2021\nimage: rcpp-logo-blue-dial.png   \ncategories:\n  - Rcpp\n---\n\n\n\nI was skimming through Hadley's advanced R over Easter (as one does) and ended up spending quite a bit of time reading through the last chapter (anyone else read books back to front?), \"Rewriting R code in c++\". My understanding of c++ was (is?) pretty much non-existent, but whenever I try to learn something new I find the process of writing about it helps things stick. So this post is exactly that, me fumbling my way through some very basic c++ using {Rcpp}. \n\n::: {.column-margin}\n\nThis post is pretty much a rewrite of the early sections in chapter 25 of Advanced R, so don't expect anything too exciting!\n\n:::\n\n# What & why\n\nFor a general introduction / overview to c++, I found https://www.learncpp.com/ to be a great place, and assumes no previous knowledge at all. Also [this presentation](https://dirk.eddelbuettel.com/papers/rcpp_rfinance_may2017.pdf) by Dirk Eddelbuettel gives a great introduction from an R perspective. [Rcpp for everyone](https://teuder.github.io/rcpp4everyone_en/) by Masaki E. Tsuda is another fantastic resource and does a great job at showing all the different possibilities with Rcpp.\n\nSo, why would one use R with c++? \n\n1. When things gotta go fast (and R is slow)\n2. Solve a problem in a new way\n3. Make R do something new / extend R\n\nI was particularly interested in point number 1, as who doesn't enjoy trying to make things go fast?\n\n# How\n\nThe `Rcpp` package makes the process of R and c++ working together \"easier, yet also more robust\"^[https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-introduction.pdf]so we'll be using this throughout the following examples. \nWhen writing c++ for a package, you'd use the .cpp file extension, however we can also include c++ chunks in rmarkdown (pretty cool) so here are a few examples...\n\n::: {.column-margin}\nYou can use the `Rcpp` chunk setting, or set the chunk option engine = \"Rcpp\" to get things working in Rmarkdown\n:::\n\nSay we want a simple function that doubles whatever number we put in, we could writing something like\n\n::: {.cell}\n\n```{.cpp .cell-code}\n// [[Rcpp::export]]\nint doubleUP(int x) {\n  int y = x * 2;\n  return y;\n}\n```\n:::\n\n\nNow there are a few things going on here, most notably we need to define the data type. In this case we use `int` for integer. Other options include doubles, strings, and logicals. We also need to use a semi-colon at the end of each statement. The `// [[Rcpp::export]]` bit makes the c++ function available to use in R, so lets do a quick test...\n\n::: {.cell}\n\n```{.r .cell-code}\ndoubleUP(10)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 20\n```\n:::\n:::\n\nGreat! Now a single value is fine, but say we have a _vector_ of values that we want to double. Would this work?\n\n::: {.cell}\n\n```{.r .cell-code}\ndoubleUP(c(10, 20, 30))\n```\n\n::: {.cell-output-error}\n```\nError in doubleUP(c(10, 20, 30)): Expecting a single value: [extent=3].\n```\n:::\n:::\n\nOh dear. Looks like we need to make some adjustments to our function so it will accept more than one number.\n\nFortunately, we can use one of the Vector classes from Rcpp, NumericVector, IntegerVector, CharacterVector, and LogicalVector to make our function accept a vector. Here is the adjusted function... \n\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nNumericVector doubleUPPP (NumericVector x) {\n  int n = x.size();\n  NumericVector result(n);\n  \n  for(int i = 0; i < n; ++i) {\n    result[i] = x[i] * 2;\n  }\n  return result;\n}\n```\n:::\n\nFew extra things have happened and I'll attempt to explain... First we create `result` which is a numeric vector the size of the vector that we pass in to the function. Then we use a for loop with the syntax `for(init; check; increment)`. We initiate the loop with a new variable `i = 0` and keep looping while i is less than n (the size of our vector). Finally the `++i` tells the loop to increment the value of i each time the loop completes.\n\n::: {.column-margin}\ndoubleUPPP has three P's to indicate it accepts a vector. Maybe this naming convention will catch on?\n:::\n\nWe've also added the following lines to the chunk:\n\n```\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n```\n\nwhich I think is a bit like using `library(package)` in R so we're making the functions(?) from Rcpp available in our c++ code. Alternatively, we could have written `Rcpp::NumericVector` each time.\n\nSo, does it work?\n\n::: {.cell}\n\n```{.r .cell-code}\ndoubleUPPP(c(10, 20, 30))\n```\n\n::: {.cell-output-stdout}\n```\n[1] 20 40 60\n```\n:::\n:::\n\n\n:). We could write a similar function in R and compare performance.\n\n::: {.cell}\n\n```{.r .cell-code}\ndoubleR <- function(x) {\n  \n  total <- vector(mode = mode(x), length = length(x))\n  \n  for (i in seq_along(x)) {\n    total[i] <- x[i] * 2\n  }\n  total\n}\n```\n:::\n\nAnd if we compare:\n\n::: {.cell}\n\n```{.r .cell-code}\nbig_vector <- runif(1e6)\n\nbench::mark(\n  doubleR(big_vector),\n  doubleUPPP(big_vector),\n\n)[1:6]\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 2 Ã— 6\n  expression                  min   median `itr/sec` mem_alloc `gc/sec`\n  <bch:expr>             <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 doubleR(big_vector)     156.3ms 156.85ms      6.38    7.67MB     2.13\n2 doubleUPPP(big_vector)   8.34ms   8.55ms    116.      7.64MB    58.2 \n```\n:::\n:::\n\nQuite the improvement! Now lets just ignore for a moment that we could simply use `big_vector + big_vector` to get the same result (and is faster than both `doubleR` and `doubleUPPP`...).  \n\nRcpp also provides some familiar R classes such as List and DataFrame. Here is a useless function that accepts a DataFrame, multiplies two columns together and returns a DataFrame with the two columns and the result.\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nDataFrame carFacts(DataFrame df, std::string var1, std::string var2) {\n\n  NumericVector var_1 = as<NumericVector>(df[var1]);\n  NumericVector var_2 = as<NumericVector>(df[var2]);\n  \n  DataFrame data = DataFrame::create( Named(var1) = var_1,         \n                                      Named(var2) = var_2,\n                                      Named(\"Product\") = var_1 * var_2); \n  return data;\n}\n```\n:::\n\nHere it is in action with our old friend `mtcars`:\n\n::: {.cell}\n\n```{.r .cell-code}\ncarFacts(mtcars, var1 = \"hp\", var2 = \"mpg\")[1:10,]\n```\n\n::: {.cell-output-stdout}\n```\n    hp  mpg Product\n1  110 21.0  2310.0\n2  110 21.0  2310.0\n3   93 22.8  2120.4\n4  110 21.4  2354.0\n5  175 18.7  3272.5\n6  105 18.1  1900.5\n7  245 14.3  3503.5\n8   62 24.4  1512.8\n9   95 22.8  2166.0\n10 123 19.2  2361.6\n```\n:::\n:::\n\nNice! (Although my function is pretty useless in practice...) \n\nAnother cool feature is the ability to use R functions in c++ code. Here is another completely useless example using the `emo::ji` function with a string input.\n\n::: {.cell}\n\n```{.cpp .cell-code}\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nRObject cppEMOJI(Function f, std::string x) {\n  return f(x);\n}\n```\n:::\n\nHere we've used the `RObject` class as a catchall for the output type (as we may not know it in advance). We've also used `std::string` as our input type. `std` refers to the standard library, from which we are using the `string` identifier. We could also use `using namespace std;` like we did for Rcpp.\n\nIf we run our function in R we get:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(emo)\ncppEMOJI(ji, \"smile\")\n```\n\n::: {.cell-output-stdout}\n```\nðŸ˜„ \n```\n:::\n:::\nIncredible.\n\n# Wrapping up\n\nBefore embarrassing myself any further with these useless functions, I think I'll leave it there. The resources for learning about Rcpp are absolutely fantastic and if you're interested I'd highly recommend starting with Hadley's Advanced R chapter and the great Rcpp vignettes. There are also a whole load of [showcase examples](https://gallery.rcpp.org/) that you can use for inspiration.\n\nThanks for reading!\n\n## Acknowledgments {.appendix}\n\nPreview image from https://github.com/RcppCore/Rcpp/issues/827, made by https://github.com/coatless",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}