{
  "hash": "de9d653e10fa13f978f27fd083ea6907",
  "result": {
    "markdown": "---\ntitle: \"Build with R, deploy with Python (and Heroku).\"\ndescription: |\n  This post looks at a cross-language approach to model deployment - something that may come in useful when working within a large data science / production environment. \ndate: 07/14/2020\nimage: preview.png\ncategories:\n  - R\n  - Python\n---\n\n\n\nAfter going through many iterations of building, evaluating and refining a model, eventually the time may come to put that model into production. There are many options when it comes to deployment - in R, `shiny` and `plumbr` come to mind - However, in this post I wanted to see if it was possible to build a model in R, but deploy it using a python framework, specifically as a web app using `flask`. \nI also wanted to try and make the app available by using [Heroku](https://www.heroku.com/what). \nWhy you might ask? Good question! Not sure how useful this workflow is, but it was good fun getting it to work!\n\n(You can see the final app in action here: https://penguin-model.herokuapp.com/)\n\n## Building the model\n\nThe code below builds a _very_ simple model that we'll use for deployment. \nThis model attempts to predict the gender of a penguin based on bill length, bill depth and flipper length (data from the `penguins` package). \nYou can imagine this model is going to be used on the local zoo's website to make it more realistic (maybe)... \n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(xgboost)\nlibrary(tidymodels)\nlibrary(tidyverse)\nlibrary(reticulate)\n\ndata(penguins)\n# feature engineering \npenguins <- penguins %>% \n  select(7, 3:5) %>% \n  drop_na() %>% \n  mutate(sex = ifelse(sex == \"female\", 1, 0))\n\n# training / testing split\nsplit <- initial_split(penguins, prop = .75)\ntrain <- training(split)\ntest <- testing(split)\n\n# convert to xgboost model matrix\ndtrain = xgb.DMatrix(data = as.matrix(train[,-1]), label = as.matrix(train$sex))\ndtest = xgb.DMatrix(data = as.matrix(test[,-1]), label = as.matrix(test$sex))\n\n# fit model\nxgb <- xgb.train(data = dtrain, \n                nrounds = 500, \n                params = list(objective = \"binary:logistic\",\n                              eval_metric = \"auc\"),\n                verbose = 0,\n                watchlist = list(eval = dtest))\n\n# predictions\npreds <- tibble(.pred_female = predict(xgb, as.matrix(test[,-1]))) %>% \n  bind_cols(test[,1], .) %>% \n  mutate(sex = factor(sex, levels = c(1,0), labels = c(\"female\", \"male\")))\n\n# evaluation\neval <- metric_set(roc_auc, gain_capture)\neval(preds, sex, .pred_female)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 2 Ã— 3\n  .metric      .estimator .estimate\n  <chr>        <chr>          <dbl>\n1 roc_auc      binary         0.922\n2 gain_capture binary         0.845\n```\n:::\n:::\n\n\n\nNext we will save the xgboost model object using the `xgb.save` function from `xgboost`. \n\n::: {.cell}\n\n```{.r .cell-code}\n# save model object\nxgboost::xgb.save(xgb, \"xgmod.model\")\n```\n:::\n\n\nWith the model saved, we can now load it into python. Due to an issue with the python implementation of xgboost to load models from bytestring (see here: https://github.com/dmlc/xgboost/issues/3013), we have to use a workaround by defining the following function:\n\n::: {.cell}\n\n```{.python .cell-code}\nimport ctypes\nimport xgboost\nimport xgboost.core\nimport pandas as pd\n\ndef xgb_load_model(buf):\n    if isinstance(buf, str):\n        buf = buf.encode()\n    bst = xgboost.core.Booster()\n    n = len(buf)\n    length = xgboost.core.c_bst_ulong(n)\n    ptr = (ctypes.c_char * n).from_buffer_copy(buf)\n    xgboost.core._check_call(\n        xgboost.core._LIB.XGBoosterLoadModelFromBuffer(bst.handle, ptr, length)\n    ) \n    return bst\n```\n:::\n\nWe can now read in the xgboost model we created in R into python.\n\n::: {.cell}\n\n```{.python .cell-code}\nwith open('xgmod.model','rb') as f:\n    raw = f.read()\n\nmodel = xgb_load_model(raw)\n\n# check to see if model loaded\nmodel\n```\n\n::: {.cell-output-stdout}\n```\n<xgboost.core.Booster object at 0x7fd89f0b16d8>\n```\n:::\n:::\n\nTo check the model is working and can generate predictions we can do:\n\n::: {.cell}\n\n```{.python .cell-code}\n# create some mock data\ninput_variables = pd.DataFrame([[40, 20, 150]],\n                                columns=['bill_length_mm', 'bill_depth_mm', 'flipper_length_mm'], \n                                dtype=float)\n                                \n                                \n# convert test datat to xgboost matrix\n\nxgtest = xgboost.DMatrix(input_variables.values)\n\n# predict\nprediction = model.predict(xgtest)[0]\n\nprint(prediction)\n```\n\n::: {.cell-output-stdout}\n```\n0.003251487\n```\n:::\n:::\n\nLooks good!\n\n## Setting up deploment\n\nSo far we have created a model in R and loaded it to python and checked it works. So far so good. Next we can start to prepare for deployment. \n\nFor deployment, we will use `flask` to create a simple web app that lets users change the input values (bill length, bill width and flipper length) and returns the predicted probability of whether the penguin is female. \n\nFirst, we will create a directory called \"penguin-app\" with a few sub directories. You can create this anywhere, but I've gone for my home directory desktop.\n\n::: {.cell}\n\n```{.r .cell-code}\ndir_create(\"~/Desktop/penguin-app\")\ndir_create(\"~/Desktop/penguin-app/templates\")\ndir_create(\"~/Desktop/penguin-app/model\")\n```\n:::\n\n\nNext, the python script below will define how the app works. This should be saved as app.py within the penguin-model directory.\n\n::: {.cell}\n\n```{.python .cell-code}\nimport flask\nimport ctypes\nimport xgboost\nimport xgboost.core\nimport pandas as pd\n\n# function to load R model into python\ndef xgb_load_model(buf):\n    if isinstance(buf, str):\n        buf = buf.encode()\n    bst = xgboost.core.Booster()\n    n = len(buf)\n    length = xgboost.core.c_bst_ulong(n)\n    ptr = (ctypes.c_char * n).from_buffer_copy(buf)\n    xgboost.core._check_call(\n        xgboost.core._LIB.XGBoosterLoadModelFromBuffer(bst.handle, ptr, length)\n    )  # segfault\n    return bst\n\nwith open('model/xgmod.model','rb') as f:\n    raw = f.read()\n\nmodel = xgb_load_model(raw)\n\n# define the app\n\napp = flask.Flask(__name__, template_folder='templates')\n\n@app.route('/', methods=['GET', 'POST'])\n\ndef main():\n    if flask.request.method == 'GET':\n      return(flask.render_template('main.html'))\n\n    if flask.request.method == 'POST':\n      bill_length_mm = flask.request.form['bill_length_mm']\n      bill_depth_mm = flask.request.form['bill_depth_mm']\n      flipper_length_mm = flask.request.form['flipper_length_mm']\n      \n      input_variables = pd.DataFrame([[bill_length_mm, \n                                       bill_depth_mm, \n                                       flipper_length_mm]],\n                                      columns=['bill_length_mm', \n                                               'bill_depth_mm', \n                                               'flipper_length_mm'], dtype=float) \n      \n      xgtest = xgboost.DMatrix(input_variables.values)\n      \n      prediction = round(model.predict(xgtest)[0], 7)\n        \n      return flask.render_template('main.html', \n                                   original_input={'Bill length': bill_length_mm,\n                                                   'Bill depth': bill_depth_mm,\n                                               'Flipper length': flipper_length_mm},\n                                   result=prediction,)\n    \nif __name__ == '__main__':\n    app.run()\n```\n:::\n\n\nThe code below is the template for our app. It includes some very simple css for style, javascript for some slider inputs to change the vales of the variables and a simple text box to output the results. This should be saved as main.html and put in the templates folder.\n\n::: {.cell}\n\n```{.r .cell-code}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\">\n    <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js\"</script>\n    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"</script>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  \n  <script type=\"text/javascript\">\n        function updateLengthInput(val) {\n                  document.getElementById('lengthInput').value=val; \n                }\n        function updateDepthInput(val) {\n                  document.getElementById('depthInput').value=val; \n                }\n        function updateFlipperInput(val) {\n                  document.getElementById('flipperInput').value=val; \n                }\n\n  </script>\n    \n  <style>\n        form {\n            margin: auto;\n            width: 40%;\n        }\n        \n        .result {\n            margin: auto;\n            width: 40%;\n            border: 1px solid #ccc;\n        }\n  </style>\n  \n  \n  <title>Penguin model</title>\n  \n</head>\n<body>\n  <form action=\"{{ url_for('main') }}\" method=\"POST\">\n    <fieldset>\n        <legend>Input values:</legend>\n        Bill length (mm):\n        <input name=\"bill_length_mm\" id=\"bill\" type=\"range\" min=\"30\" max=\"60\"\n        onchange=\"updateLengthInput(this.value);\" required>\n        <input type=\"text\" id=\"lengthInput\" value=\"45\">\n        <br>\n        <br> Bill depth (mm):\n        <input name=\"bill_depth_mm\" type=\"range\" min=\"10\" max=\"25\"\n        \n        onchange=\"updateDepthInput(this.value);\" required>\n        <input type=\"text\" id=\"depthInput\" value=\"17\">\n        <br>\n        <br> Flipper length (mm):\n        <input name=\"flipper_length_mm\" type=\"range\" min=\"170\" max=\"240\"\n        onchange=\"updateFlipperInput(this.value);\" required>\n        <input type=\"text\" id=\"flipperInput\" value=\"200\">\n        <br>\n        <br>\n        <div style=\"text-align:center\">  \n        <input type=\"submit\" />  \n        </div> \n    </fieldset>\n</form>\n<br>\n<br>\n<div class=\"result\" align=\"center\">\n    {% if result %}\n        {% for variable, value in original_input.items() %}\n            <b>{{ variable }}</b> : {{ value }}\n        {% endfor %}\n        <br>\n        <br> Probability of female penguin:\n           <p style=\"font-size:50px\">{{ result }}</p>\n    {% endif %}\n</div>  \n</body>\n</html>\n```\n:::\n\nWe also need to move the saved model to the model directory. In the terminal we can use:\n\n`mv xgmod.model penguin-app/model/`\n\nAt this stage, it is useful to check if everything is working locally. To do this we can use `flask run` inside the penguin-app directory. This should make the app available at localhost:5000 which you can check in a browser.\n\n## Final preparations \n\nThere are a few minor steps left before we can complete deployment to Heroku and make this ~~really useful~~ model available to the world.\n\nFirst, the following is needed:\n\n1. A Heroku account,\n2. The Heroku CLI tool \n3. git \n\nWe also need to create the following files in the webapp directory:\n\nProcfile - This tells Heroku the type of app we are using and how to serve it to users. \n\n::: {.cell}\n\n```{.r .cell-code}\nweb: gunicorn app:app\n```\n:::\n\nRequirements.txt - This tells Heroku what packages need to be installed within your app\n\n::: {.cell}\n\n```{.r .cell-code}\nflask\npandas\ngunicorn\nxgboost\n```\n:::\n\n<!-- After running all the steps so far, the final directory structure should look like this: -->\n\n<!-- ```{r} -->\n<!-- dir_tree(\"~/Desktop/penguin-app\") -->\n<!-- ``` -->\n\n## Deploy!\n\nWe are now ready to deploy the model. Over in the terminal, cd into the penguin-app directory (if not already there) and run:\n\n- `git init`: to initialise the git repo in the directory\n\n- `heroku login`: this should open a web browser for you to log into your Heroku account \n\n- `heroku create penguin-model`: To create our aptly named (pun intended) penguin-model app.\n\nNow we can add the contents of our app and push to heroku:\n\n- `git add .`\n\n- `git commit -m \"First deployment\"`\n\n- `heroku git:remote -a penguin-model`\n\n- `git push heroku master`\n\n \nIf all goes to plan, that should result in a successful deployment! You can see the live app here: [https://penguin-model.herokuapp.com/](https://penguin-model.herokuapp.com/)\n\n## Summary\n\nSo that was a very quick tour of a cross-language model deployment. It was good fun getting each of these elements to work, and quite satisfying to see the final product. \nFurthermore, it was possible to get all of this woprking without ever leaving the comfort of RStudio - which is always a bonus!\nThis post was heavily inspired [this post](https://blog.cambridgespark.com/deploying-a-machine-learning-model-to-the-web-725688b851c7), which provides a great introduction to the python/heroku side of deployment, and well worth a read if you're interested.\n\nThanks for reading!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}