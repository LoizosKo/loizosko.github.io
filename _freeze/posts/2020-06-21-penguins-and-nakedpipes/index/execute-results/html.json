{
  "hash": "b961cd3858131992b1e2db5e4b185352",
  "result": {
    "markdown": "---\ntitle: \"Penguins and nakedpipes\"\ndescription: |\n  Exploring the new {palmerpenguins} dataset with {nakedpipe} - An alternative to using {magrittr}'s %>%.\ndate: 06/21/2020\nbibliography: r-refs.bib  \ncategories:\n  - R\nimage: preview.png\n---\n\n\n\nRecently I came across [`nakedpipe`](https://github.com/moodymudskipper/nakedpipe) @R-nakedpipe on github - an R package with an intriguing name to say the least... After checking out the repo, I was very impressed and thought I'd share my notes here!\n\nSo what does `nakedpipe` _do_?\n\nI'm sure most R users are familiar with `magrittr`'s pipe (%>%) operator. The %>% allows you to chain together multiple commands by piping forward an expression into a function like `x %>% f`, rather than `f(x)` @R-magrittr. The resulting code is usually very readable and easy to debug. `nakedpipe` adopts a similar style, but removes the need to use %>% after every function, and adds some additional logging/debugging features as well as being slightly faster than the `magrittr` implementation.\n\nIn order to try out the features in `nakedpipe` I used the new `palmerpenguins` dataset [@R-palmerpenguins] which provides a great test dataset and is a refreshing alternative the usual suspects, `mtcars` et al...\n\n### Getting started\n\n::: {.cell}\n\n```{.r .cell-code}\n#remotes::install_github(\"allisonhorst/palmerpenguins\")\n#remotes::install_github(\"moodymudskipper/nakedpipe\")\n\nlibrary(tidyverse)\nlibrary(palmerpenguins) \nlibrary(nakedpipe)\nlibrary(magrittr)\n\npenguins <- penguins\n```\n:::\n\nA basic example looks like this:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %.% {\n  filter(sex == \"female\") \n  select(1:5) \n  head(5)\n}   \n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 5 × 5\n  species island    bill_length_mm bill_depth_mm flipper_length_mm\n  <fct>   <fct>              <dbl>         <dbl>             <int>\n1 Adelie  Torgersen           39.5          17.4               186\n2 Adelie  Torgersen           40.3          18                 195\n3 Adelie  Torgersen           36.7          19.3               193\n4 Adelie  Torgersen           38.9          17.8               181\n5 Adelie  Torgersen           41.1          17.6               182\n```\n:::\n:::\n\nYou use the `%.%` operator to \"pipe\" into a sequence of functions, which are within {}. You can reduce the code further by removing the subset / filter argument like:\n\n::: {.column-margin}\nAny call to < > <= >= == != %in% & | will work in this way\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %.% {\n  sex == \"female\"\n  select(1:5) \n  head(5)\n}  \n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 5 × 5\n  species island    bill_length_mm bill_depth_mm flipper_length_mm\n  <fct>   <fct>              <dbl>         <dbl>             <int>\n1 Adelie  Torgersen           39.5          17.4               186\n2 Adelie  Torgersen           40.3          18                 195\n3 Adelie  Torgersen           36.7          19.3               193\n4 Adelie  Torgersen           38.9          17.8               181\n5 Adelie  Torgersen           41.1          17.6               182\n```\n:::\n:::\n\nSimilarly, this works with transform / mutate calls. The use of the `=` sign implies a new column is being created, for example:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %.% {\n  sex == \"female\"\n  body_mass_kg = body_mass_g/1000\n  select(body_mass_g, body_mass_kg)\n  head(5)\n}  \n```\n\n::: {.cell-output-stdout}\n```\n  body_mass_g body_mass_kg\n1        3800        3.800\n2        3250        3.250\n3        3450        3.450\n4        3625        3.625\n5        3200        3.200\n```\n:::\n:::\n\nAssigning the result of a sequence of function can be done by using `->` at the end of the sequence (outside of the {}) or using the `%<.%` operator at the start of the sequence.\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %.% {\n  sex == \"female\"\n  arrange(body_mass_g)\n  select(1,2,6) \n  head(5)\n} -> small_penguins\n\n# Or\n\nsmall_penguins <- penguins\n\nsmall_penguins %<.% {\n  sex == \"female\"\n  arrange(body_mass_g)\n  select(1,2,6) \n  head(5)\n} \n```\n:::\n\nAdditionally, you can create outputs midway through the sequence of functions by using `~~`:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %.% {\n  sex == \"female\"\n  ~~ . -> female_penguins\n  select(1:5) \n  head(5) \n} -> x\n\nhead(female_penguins)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island bill_length_mm bill_depth_mm flipper_length_… body_mass_g sex  \n  <fct>   <fct>           <dbl>         <dbl>            <int>       <int> <fct>\n1 Adelie  Torge…           39.5          17.4              186        3800 fema…\n2 Adelie  Torge…           40.3          18                195        3250 fema…\n3 Adelie  Torge…           36.7          19.3              193        3450 fema…\n4 Adelie  Torge…           38.9          17.8              181        3625 fema…\n5 Adelie  Torge…           41.1          17.6              182        3200 fema…\n6 Adelie  Torge…           36.6          17.8              185        3700 fema…\n# … with 1 more variable: year <int>\n```\n:::\n:::\n\n\n### Additional operators\n\nYou can use `%P.%` to print the output of each step:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %P.% {\n  sex == \"female\"\n  select(1:5) \n  head(5)\n} -> y\n```\n\n::: {.cell-output-stderr}\n```\npenguins %P.% {\n```\n:::\n\n::: {.cell-output-stderr}\n```\n  sex == \"female\"\n```\n:::\n\n::: {.cell-output-stdout}\n```\n# A tibble: 165 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.5          17.4               186        3800\n 2 Adelie  Torgersen           40.3          18                 195        3250\n 3 Adelie  Torgersen           36.7          19.3               193        3450\n 4 Adelie  Torgersen           38.9          17.8               181        3625\n 5 Adelie  Torgersen           41.1          17.6               182        3200\n 6 Adelie  Torgersen           36.6          17.8               185        3700\n 7 Adelie  Torgersen           38.7          19                 195        3450\n 8 Adelie  Torgersen           34.4          18.4               184        3325\n 9 Adelie  Biscoe              37.8          18.3               174        3400\n10 Adelie  Biscoe              35.9          19.2               189        3800\n# … with 155 more rows, and 2 more variables: sex <fct>, year <int>\n```\n:::\n\n::: {.cell-output-stderr}\n```\n  select(1:5)\n```\n:::\n\n::: {.cell-output-stdout}\n```\n# A tibble: 165 × 5\n   species island    bill_length_mm bill_depth_mm flipper_length_mm\n   <fct>   <fct>              <dbl>         <dbl>             <int>\n 1 Adelie  Torgersen           39.5          17.4               186\n 2 Adelie  Torgersen           40.3          18                 195\n 3 Adelie  Torgersen           36.7          19.3               193\n 4 Adelie  Torgersen           38.9          17.8               181\n 5 Adelie  Torgersen           41.1          17.6               182\n 6 Adelie  Torgersen           36.6          17.8               185\n 7 Adelie  Torgersen           38.7          19                 195\n 8 Adelie  Torgersen           34.4          18.4               184\n 9 Adelie  Biscoe              37.8          18.3               174\n10 Adelie  Biscoe              35.9          19.2               189\n# … with 155 more rows\n```\n:::\n\n::: {.cell-output-stderr}\n```\n  head(5)\n```\n:::\n\n::: {.cell-output-stdout}\n```\n# A tibble: 5 × 5\n  species island    bill_length_mm bill_depth_mm flipper_length_mm\n  <fct>   <fct>              <dbl>         <dbl>             <int>\n1 Adelie  Torgersen           39.5          17.4               186\n2 Adelie  Torgersen           40.3          18                 195\n3 Adelie  Torgersen           36.7          19.3               193\n4 Adelie  Torgersen           38.9          17.8               181\n5 Adelie  Torgersen           41.1          17.6               182\n```\n:::\n\n::: {.cell-output-stderr}\n```\n}\n```\n:::\n:::\n\n`%L.%` prints out timings of each step in the sequence (Not particularly useful for this toy example, but would be for longer running code)\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %L.% {\n  sex == \"female\"\n  select(1:5) \n  head(5)\n} -> z\n```\n\n::: {.cell-output-stderr}\n```\npenguins %L.% {\n```\n:::\n\n::: {.cell-output-stderr}\n```\n  sex == \"female\"\n```\n:::\n\n::: {.cell-output-stdout}\n```\n   user  system elapsed \n  0.001   0.000   0.001 \n```\n:::\n\n::: {.cell-output-stderr}\n```\n  select(1:5)\n```\n:::\n\n::: {.cell-output-stdout}\n```\n   user  system elapsed \n  0.009   0.000   0.009 \n```\n:::\n\n::: {.cell-output-stderr}\n```\n  head(5)\n```\n:::\n\n::: {.cell-output-stdout}\n```\n   user  system elapsed \n  0.001   0.000   0.000 \n```\n:::\n\n::: {.cell-output-stderr}\n```\n}\n```\n:::\n:::\n\n`%F.%` lets you assign a function using the `nakedpipe` syntax:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguin_func <- . %F.% {\n  group_by(species)\n  summarise(across(where(is.numeric), ~mean(., na.rm = TRUE)))\n  mutate(across(where(is.numeric), round, 2))\n}\n\npenguin_func(penguins)\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 3 × 6\n  species   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g  year\n  <fct>              <dbl>         <dbl>             <dbl>       <dbl> <dbl>\n1 Adelie              38.8          18.4              190.       3701. 2008.\n2 Chinstrap           48.8          18.4              196.       3733. 2008.\n3 Gentoo              47.5          15.0              217.       5076. 2008.\n```\n:::\n:::\n\n\n### ggplot\n\n`nakedpipe` also plays well with ggplot:\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %.% {\n  body_mass_kg = body_mass_g / 1000\n  ggplot(aes(body_mass_kg, flipper_length_mm, shape = species, colour = species))\n  + geom_point() \n  + labs(y = \"Flipper length\", x = \"Body mass (kg)\")\n  + theme_minimal()\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nThere are some other useful things that `nakepipe` can do that I haven't included here, such as `%D.%` operator for debugging, `%..%` for even faster performance and even a RStudio addin to convert your `magrittr` style code to the `nakepipe` syntax. Pretty cool!\n\nIf you've found any of these examples interesting, I'd highly recommend you check out the package (https://github.com/moodymudskipper/nakedpipe) and give it a try!\n\n# References {.unnumbered}\n\n::: {#refs}\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}